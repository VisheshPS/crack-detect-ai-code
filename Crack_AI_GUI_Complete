function Crack_AI_GUI_Complete
    clc; clear;

    %% STEP 1: Load and Preprocess Data
    data = readtable('Crack_Data_Modal_AI.csv');

    % Extract features and labels
    X = data{:, {'Freq1', 'Freq2', 'Freq3'}};
    Y_present  = data.CrackPresent;
    Y_location = data.CrackLocation;
    Y_type     = data.CrackType;
    Y_reason   = data.CrackReason;

    % Split data into 80% training and 20% testing
    cv = cvpartition(size(X, 1), 'HoldOut', 0.2);
    trainIdx = training(cv);
    testIdx = test(cv);

    X_train = X(trainIdx, :);  X_test = X(testIdx, :);
    Yp_train = Y_present(trainIdx);   Yp_test = Y_present(testIdx);
    Yl_train = Y_location(trainIdx);  Yl_test = Y_location(testIdx);
    Yt_train = Y_type(trainIdx);      Yt_test = Y_type(testIdx);
    Yr_train = Y_reason(trainIdx);    Yr_test = Y_reason(testIdx);

    %% STEP 2: Train Random Forest Models (TreeBagger)
    disp("Training models...");

    model_present  = TreeBagger(100, X_train, Yp_train, 'Method', 'classification');
    model_location = TreeBagger(100, X_train, Yl_train, 'Method', 'classification');
    model_type     = TreeBagger(100, X_train, Yt_train, 'Method', 'classification');
    model_reason   = TreeBagger(100, X_train, Yr_train, 'Method', 'classification');

    %% STEP 3: Evaluate Accuracy
    disp("Evaluating models...");

    evalAccuracy(Yp_test, predict(model_present,  X_test),  'Crack Present');
    evalAccuracy(Yl_test, predict(model_location, X_test),  'Crack Location');
    evalAccuracy(Yt_test, predict(model_type,     X_test),  'Crack Type');
    evalAccuracy(Yr_test, predict(model_reason,   X_test),  'Crack Reason');

    %% STEP 4: Launch GUI
    createGUI(model_present, model_location, model_type, model_reason);
end

%% Helper Function: Accuracy Display
function evalAccuracy(Ytrue, Ypred, label)
    acc = mean(strcmp(Ytrue, Ypred)) * 100;
    fprintf('\n--- %s ---\nAccuracy: %.2f%%\n', label, acc);
end

%% STEP 5: GUI Creation
function createGUI(model_present, model_location, model_type, model_reason)
    fig = uifigure('Name', 'Crack Prediction AI', 'Position', [600 300 450 420]);

    % Title
    uilabel(fig, 'Text', 'Enter Modal Frequencies', 'FontSize', 14, 'FontWeight', 'bold', ...
        'Position', [130 370 250 30]);

    % Frequency Inputs
    uilabel(fig, 'Text', 'Freq1 (Hz):', 'Position', [50 310 80 22]);
    f1 = uieditfield(fig, 'numeric', 'Position', [150 310 150 22]);

    uilabel(fig, 'Text', 'Freq2 (Hz):', 'Position', [50 270 80 22]);
    f2 = uieditfield(fig, 'numeric', 'Position', [150 270 150 22]);

    uilabel(fig, 'Text', 'Freq3 (Hz):', 'Position', [50 230 80 22]);
    f3 = uieditfield(fig, 'numeric', 'Position', [150 230 150 22]);

    % Output Labels
    resultArea = uitextarea(fig, 'Position', [50 40 350 160], ...
        'Editable', 'off', 'FontSize', 13);

    % Predict Button
    uibutton(fig, 'Text', 'Predict Crack Info', 'Position', [150 190 150 30], ...
        'ButtonPushedFcn', @(btn, event) predictCrackInfo(f1.Value, f2.Value, f3.Value, ...
        model_present, model_location, model_type, model_reason, resultArea));
end

%% STEP 6: Prediction Logic
function predictCrackInfo(f1, f2, f3, model_present, model_location, model_type, model_reason, resultArea)
    input = [f1, f2, f3];

    % Predict using trained models
    crackPresent = predict(model_present,  input);
    crackType    = predict(model_type,     input);
    crackLoc     = predict(model_location, input);
    crackReason  = predict(model_reason,   input);

    % Format result
    if strcmp(crackPresent, 'No')
        msg = sprintf("✅ No crack detected.\n\nFrequencies:\nFreq1 = %.2f\nFreq2 = %.2f\nFreq3 = %.2f", f1, f2, f3);
    else
        msg = sprintf("⚠ Crack Detected!\n\nType: %s\nLocation: %s\nReason: %s\n\nFrequencies:\nFreq1 = %.2f\nFreq2 = %.2f\nFreq3 = %.2f", ...
            crackType{1}, crackLoc{1}, crackReason{1}, f1, f2, f3);
    end

    resultArea.Value = msg;
end
